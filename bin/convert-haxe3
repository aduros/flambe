#!/usr/bin/env python
#
# Tries to convert a project to Haxe 3. It will do most of the heavy lifting, but some manual
# editing will still be necessary.
#
# **** WARNING WARNING WARNING ****
# Create a backup of your project before running this script!
# **** WARNING WARNING WARNING ****
#
# Performs these replacements:
#     * var foo (getFoo, setFoo) --> var foo (get, set)
#     * callback(foo, bar) --> foo.bind(bar)
#     * Hash<Foo> --> Map<String,Foo>
#     * IntHash<Foo> --> Map<Int,Foo>
#     * class Foo extends Bar, implements Baz --> class Foo extends Bar implements Baz
#     * @:macro --> macro
#     * ExprRequire --> ExprOf
#     * Handles a few moved types in import statements

import os
import re
import sys

property_keywords = ["get", "default", "never", "null"]

# Note: Only import/using statements are replaced, so you may have to go in and manually fix
# whatever was renamed
renamed_types = {
    "flambe.util.Hashes": "flambe.util.Maps",

    "haxe.BaseCode": "haxe.crypto.BaseCode",
    "haxe.Md5": "haxe.crypto.Md5",
    "haxe.SHA1": "haxe.crypto.Sha1",
    "haxe.Stack": "haxe.CallStack",
    "haxe.FastList": "haxe.ds.GenericStack",

    # This list is not complete
    "neko.zip.Reader": "haxe.zip.Reader",
    "neko.zip.Writer": "haxe.zip.Writer",
    "neko.FileSystem": "sys.FileSystem",
    "neko.io.File": "sys.io.File",
}

for root, dirs, files in os.walk("src"):
    for path in files:
        path = os.path.join(root, path)
        renamed_methods = {}

        with open(path) as f:
            content = f.read()

            def replace_imports (m):
                import_statement = m.group(1)
                type = m.group(2)
                renamed_type = renamed_types.get(type, type)
                return "%s %s;" % (import_statement, renamed_type)

            content = re.sub(r"\b(import|using)\s+(.+?);", replace_imports, content)

            def replace_properties (m):
                prop = m.group(1)

                getter = m.group(2)
                if getter not in property_keywords:
                    renamed_methods[getter] = "get_"+prop
                    getter = "get"

                setter = m.group(3)
                if setter not in property_keywords:
                    renamed_methods[setter] = "set_"+prop
                    setter = "set"

                return "var %s (%s, %s)" % (prop, getter, setter)

            content = re.sub(r"var\s+(\w+)\s*\(\s*(\w+),\s*(\w+)\)", replace_properties, content)

            def replace_callbacks (m):
                function = m.group(1)
                params = m.group(2)
                return "%s.bind(%s)" % (function, params)

            content = re.sub(r"\bcallback\((.*?)\s*,\s*(.*)\)", replace_callbacks, content)

            def replace_hashes (m):
                key_type = "Int" if m.group(1) == "Int" else "String"
                value_type = m.group(3)
                return "Map" if value_type is None else "Map<%s,%s>" % (key_type, value_type)

            content = re.sub(r"\b(Int)?Hash(<(.*?)>)?", replace_hashes, content)

            def replace_inheritance (m):
                return m.group(0)[1:] # Trim the leading comma

            content = re.sub(r",\s*(extends|implements)(.*)", replace_inheritance, content)

            content = re.sub(r"@:macro(\s+)?", "macro ", content)
            content = re.sub(r"ExprRequire<", "ExprOf<", content)

        with open(path, "w") as f:
            def replace_methods (m):
                if m.group(1) in renamed_methods:
                    return "function " + renamed_methods[m.group(1)]
                return m.group()
            content = re.sub(r"function\s+(\w+)", replace_methods, content)
            f.write(content)
